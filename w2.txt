4. grep
- matching
- 대소문자 구분함
- 라인 전체를 출력한다.

Q. The가 있는 txt 파일을 전체 출력하라
-> grep The *.txt

- -v : 조건 문자열이 없는 라인 출력

Q. /usr/lib에 포함된 하위 디렉터리 개수 알아내기
-> ls -l /usr/lib | cut -c1 | grep d | wc -l

5. sort
- 정렬, 오름차순 (abcd...)
- -r : 내림차순! (reverse)
- 숫자 정렬 (-n)

Q1. animals.txt 3번째 필드 오름차순 정렬해서 출력
-> cut -f animals.txt | sort -n

Q2. animals.txt 3번째 필드 최소값, 최대값 출력하기
-> 최대 : cut -f3 animals.txt | sort -nr | head -n1
-> 최소 : cut -f3 animals.txt | sort -n | head -n1

Q3. /etc/passwd 디렉터리에서 사용자 이름 정렬하여 추출하기
-> cut -d: -f1 /etc/passwd | sort

Q4. 사용자 중 root가 있는지 확인하기 (존재하는 라인만 출력)
-> head /etc/passwd | cut -d: -f1 | grep root
-> grep -w root (' '띄어쓰기로 구분된 root만 grep)

6. uniq
- 중복된 문자열을 제거해서 보여주되, 인접한 중복 문자열만

Q. 성적표 (grades 파일)에서 가장 빈번하지 않은 등급부터 출력하기
-> cut -f1 grades | sort | uniq -c | sort -n

AAAACCCBBBAA
* sort와 uniq의 순서 중요

---------------------------------------------------------
#1. 버전 관리
- 파일의 변화를 시간에 따라 저장했다가 나중에 특정 시점의 버전으로 다시 꺼내올 수 있는 시스템
- 협업 (실수시 백업 가능)
- 툴 : 깃

#2. 깃
- 데이터 저장 방식 : 스냅샷을 하듯이
- 오프라인으로 가능 (네트워크 필요x)
  - if 빈 파일 -> 텍스트 입력
  - 키(key) - 밸류(value)
    - 키는 고유값
    - 밸류 (텍스트)
- 깃 상태
  - 수정 : 파일이 변경된 상태
  - 커밋 : 저장
  - 스테이지 : 스냅샷을 찍어서 커밋할 준비가 된 상태
q
  - 수정 -> 스테이징 -> 커밋

- 깃 커밋 순서:
  - 상태 체크 -> 수정 -> 스테이징 - 커밋

1) 버전 체크
-> git --version

2) 사용자 정보 설정하기
-> git config user.name {이름}
- name
- email
- 옵션 : --global (전체 시스템에 영향을 줌)
  - 포로젝트마다 다른 이름을 사용하고 싶을 경우는 옵션을 제외함

- core.editor
  - vi

- git help <프로그램 명>

# 디렉터리 (directory)
- 우리가 말하는 "폴더"
- 트리구조를 가진다
- "/" 로 구분
- 현재 디렉토리 -> working directory, current directory
- / : 루트 디렉토리

- 절대경로 : 루트에서 부터의 경로
- 상대경로 : 현재 디렉토리 기준

3) 깃 초기화
- git init : .git에 모든 변경사항(스냅샷)이 저장이 된다.

4) 상태 체크
- git status

- 깃이 모르는 파일일 경우
untracked -> 'add' -> tracked

add -> commit

- branch 정보 : main
- f37dfle : 키 정보
- init commit - 메세지
1 file changed, 7 insert(+) : 변경사항